@model LandingPad.DAL.LandingPadContext

@{
    ViewBag.Title = "Edit";
    int id = ViewBag.ID;
    int pId = Model.Writings.Where(i => i.WritingID == id).FirstOrDefault().ProfileID;
}

<h2>Edit</h2>

@Html.Partial("_Menu", Model)

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@section editScripts {
<script>
        $(document).ready(function () {
            var True = true, False = false;
            var pseudonyms = [@Html.Raw(String.Join(",", Model.Pseudonyms.Where(i => i.ProfileID == pId).Select(j => j.PseudonymID)))];
            var formatTags = [@Html.Raw(String.Join(",", Model.FormatTags.Select(i => i.FormatID)))];
            var selectedPseudonyms = [@Html.Raw(String.Join(",", Model.WritingPseudonyms.Where(i => i.WritingID == id).Select(i => i.PseudonymID)))];
            var spCount = @Model.WritingPseudonyms.Where(i => i.WritingID == id).Select(i => i.PseudonymID).Count();
            var selectedTags = [@Html.Raw(String.Join(",", Model.WritingFormats.Where(i => i.WritingID == id).Select(i => i.FormatID)))];
            var sftCount = @Model.WritingFormats.Where(i => i.WritingID == id).Select(i => i.FormatID).Count();

            //mark the writing id for easy access from controller on save
            $("#writingID").val(@id);

            //populate title, description, and editor
            $("#title").val('@Model.Writings.Where(i => i.WritingID == id).FirstOrDefault().Title');
            $("#description").val('@Model.Writings.Where(i => i.WritingID == id).FirstOrDefault().DescriptionText');
            $('.ql-editor').html('@Html.Raw(ViewBag.Document)');

            //get rid of all options for the select
            $("#profileID option").removeProp("selected");
            $("#profileID option").prop("hidden", true);
            $("#profileID option").prop("disabled", true);

            //then add back in the correct option for the select and select it
            $("#profileID option." + @pId).removeProp("hidden");
            $("#profileID option." + @pId).removeProp("disabled");
            $("#profileID option." + @pId).prop("selected", true);

            //load the pseudonyms for the profileID
            $("#pseudonymContainer > span." + @pId).removeClass("collapse");

            //and check the ones that are currently connected to the writing
            for (var i = 0; i < @Model.Pseudonyms.Where(i => i.ProfileID == pId).Count(); i++) {
                for (var j = 0; j < spCount; j++) {
                    if (selectedPseudonyms[j] === pseudonyms[i])
                        $("#pseudonymContainer input." + pseudonyms[i]).prop("checked", true);
                }
            }

            //check the format tags that are currently connected to the writing
            for (var i = 0; i < @Model.FormatTags.Count(); i++) {
                for (var j = 0; j < sftCount; j++) {
                    if (selectedTags[j] === formatTags[i]) {
                        $("#formatTagContainer input." + formatTags[i]).prop("checked", true);
                        $("#formatTagContainer input." + formatTags[i]).trigger("change");
                    }
                }
            }

            //check the current permissions settings
            $("#likesOn").prop("checked", @Model.Writings.Where(i => i.WritingID == id).FirstOrDefault().LikesOn);
            $("#commentsOn").prop("checked", @Model.Writings.Where(i => i.WritingID == id).FirstOrDefault().CommentsOn);
            $("#critiqueOn").prop("checked", @Model.Writings.Where(i => i.WritingID == id).FirstOrDefault().CritiqueOn);
        });
</script>
}
